This is shortcuts
show/hide terminal : Ctrl + `
show/hide sidebar Ctrl + B 
open file Ctrl + P
command pallete ctrl + shift + P or Ctrl + P + > 
jump to line number ctrl+pallete+:
jump to symbol ctrl+pallete+@ - jump to head, body of html file
toggle wrap Alt + Z for multi window settings 

You create a branch. This is a diversion or let's say a test thing. This you do it on your PC. You create a branch in Github desktop. 
Now that you have created a diversion. Let's start writing things to test in this diversion. 
Let's go to VS code and now you update it in local html file. 
I am now here and updating Local html file. 
Till now only a branch is created on my local system but not visible for others to see. 
After adding some details in local system let me push it for others to see that changes in Github online.
So now let's commit to changes after saving it in local html file. 
After I commit to changes, as a standard practice I need to push it for others to see and review. 
So now I committed it with commit description as let's say added new movies. 
Now committing code is like adding a layer. You can let's say always undo it. But by undo instead of undoing whole project it will only undo what is commited. This way if somethings do not work out you can revert back to what was working before. 
Now that code is ready to push. 
Then you push it to the server to Github for others to see. 
Now if you go to Github you can review the changes made in the new branch. 
Review the change and merge request. 


Write the code in a branch.
Commit it. 
Push it to server.
Check the pushed content in server. Confirm if it is okay merge it.  
Merge request into main. 
Pull that merged content into local branch. 
Now it will also be visible in main branch on Github. 

Okay so what Netlify is doing is it is only updating the changes made in the main branch. 
So your site won't be deployed until changes are pushed to main branch. 
Push request to main branch and then automatically all deployable files will be deployed. 

Working in main branch is easy. 
Write it in main branch, commit it, push it and it will be live on Github and subsequently published on sites like Netlify if the site is deployed for web preview. 

Working in branch is not easy. 
First you write in local pc. 
Then you push that new branch with new changes. 
Then you review them online and create a pull it to main request. 
Onced you create a pull request, you can view the changes and confirm if it ready to merge, if not ask them to make changes and push the code again. 
Once you are satisfied, you can merge the request. It will then merge with main code and subsequently deploy if continuous deployment is enabled. 

GIST: 
In branch we first make a branch.
Push branch to github cloud. 
Next you open the code in VS Code. Edit it now. 
After all the editing now you commit your message. Saving and commiting is different. Saving is saving in the local client like VS Code. Committing is committing to code base. 
After commiting or finalizing the message, now you want this to go to github. So you say please pull this code from bottom that is machine to cloud that is Github. 
So create a pull request. 
Once the code is pulled. 

if you are working on main branch - save - commit with description - push to cloud github. 
if you are working on new branch other than main - push branch - save - commit with description - pull request to cloud github - merge request - now go to main and pull origin or pull from cloud back to client. 
it is called pull request because the code that is sent to cloud has to pulled after request. 
The pull request pushes the code from the branch on client side to branch on cloud side. 
Once there you can review the code and see if there is any changes to be done. if no changes then proceed to merge. You do this by clicking on confirm merge. 
Once you create a pull request it will tell you if there are any conflicts. If there are no conflicts then click on confirm merge or you can comment on any conflicts to be taken care of. 
Confirm merge will now seal that branch ready to be merged to the main. But wait. Confirm merge does not merge to the main branch yet. 
Confirm merge merely makes it ready to be integrated to main branch. 
Now you need to go to main branch and pull origin to complete the pull request. 

This is the reason why pushing the code to cloud in a branch is called pull request. because eventually the code has to be pulled to the main branch from the cloud. 
Whereas in main branch you simply push the code to cloud. 
